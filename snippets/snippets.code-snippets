{
    "let": {
        "prefix": "let",
        "body": [
            "let ${1:varname} : ${2:type} = $0"
        ],
        "description": "unmutable var declaration"
    },
    "let_mut": {
        "prefix": "let_mut",
        "body": [
            "let mut ${1:varname} : ${2:type} = $0"
        ],
        "description": "mutable var declaration"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if $0 {",
            "\t",
            "}",
        ],
        "description": "if"
    },
    "if-else": {
        "prefix": "ife",
        "body": [
            "if $0 {",
            "\t",
            "} else {",
            "\t",
            "}",
        ],
        "description": "if-else"
    },
    "if-let": {
        "prefix": "if?",
        "body": [
            "if let ${1|Some(item),Err(e)|} = $0 {",
            "\t",
            "}",
        ],
        "description": "if-let"
    },
    "match": {
        "prefix": "match",
        "body": [
            "match $0 {",
            "\t => ",
            "\t_ => ",
            "}",
        ],
        "description": "match expr"
    },
    "match_opt": {
        "prefix": "match?",
        "body": [
            "match $0 {",
            "\tSome(v) => ",
            "\tNone => ",
            "}",
        ],
        "description": "match optional"
    },
    "match_err": {
        "prefix": "match!",
        "body": [
            "match $0 {",
            "\tOk(v) => ",
            "\tErr(e) => ",
            "}",
        ],
        "description": "match result"
    },
    "loop": {
        "prefix": "loop",
        "body": [
            "loop {",
            "\t$0",
            "}",
        ],
        "description": "infinite loop"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for ${1:index}, ${2:value} in $0 {",
            "\t",
            "}",
        ],
        "description": "for loop"
    },
    "for_enum": {
        "prefix": "for_e",
        "body": [
            "for (${1:index}, ${2:value}) in $0 {",
            "\t",
            "}",
        ],
        "description": "for enum loop"
    },
    "while": {
        "prefix": "wh",
        "body": [
            "while $0 {",
            "\t",
            "}",
        ],
        "description": "while loop"
    },
    "while?": {
        "prefix": "wh?",
        "body": [
            "while let Some(${1:value}) = $0 {",
            "\t",
            "}",
        ],
        "description": "while let loop"
    },
    "struct": {
        "prefix": "stru",
        "body": [
            "struct ${1:name} {",
            "\t$0",
            "}",
        ],
        "description": "struct decl"
    },
    "struct_generic": {
        "prefix": "stru_T",
        "body": [
            "struct ${1:name}<T$0> {",
            "\t",
            "}",
        ],
        "description": "generic struct decl"
    },
    "enum_generic": {
        "prefix": "enum_T",
        "body": [
            "enum ${1:name}<T$0> {",
            "\t",
            "}",
        ],
        "description": "generic enum decl"
    },
    "trait": {
        "prefix": "trait",
        "body": [
            "trait ${1:name} {",
            "\t$0",
            "}",
        ],
        "description": "trait decl"
    },
    "trait_generic": {
        "prefix": "trait_T",
        "body": [
            "trait ${1:name}<T$0> {",
            "\t",
            "}",
        ],
        "description": "generic trait decl"
    },
    "impl_known_trait": {
        "prefix": "impl_known_t",
        "body": [
            "impl ${1|Clone,Copy,Debug,Deref,Display,Drop,Hashable,Send,Sync|} for $0 {",
            "\t",
            "}",
        ],
        "description": "impl a known trait for type"
    },
    "impl_trait": {
        "prefix": "impl_t",
        "body": [
            "impl $0 for  {",
            "\t",
            "}",
        ],
        "description": "impl a trait for type"
    },
    "constructor/method": {
        "prefix": "impl",
        "body": [
            "impl ${1:type} {",
            "\tfn new($0) -> ${1:type} {",
            "\t\t${1:type}{}",
            "\t}",
            "}"
        ],
        "description": "impl constructor/method"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}($0) -> i32 {",
            "\t1",
            "}",
        ],
        "description": "fn decl"
    },
    "async_fn": {
        "prefix": [
            "fn_async", 
            "async_fn"
        ],
        "body": [
            "async fn ${1:name}($0) -> std::io::Result<i32, futures::future::err> {",
            "\tOk(1)",
            "}",
        ],
        "description": "async fn decl"
    },
    "method": {
        "prefix": "fn_met",
        "body": [
            "fn ${1:name}(${2|&self,&mut self,self|}, $0) -> i32 {",
            "\t1",
            "}",
        ],
        "description": "method decl"
    },
    "mod": {
        "prefix": "mod",
        "body": [
            "${1|mod,pub mod|} {",
            "\t$0",
            "}",
        ],
        "description": "module decl"
    },
    "test_mod": {
        "prefix": "test_mod",
        "body": [
            "#[cfg(test)]",
            "mod {",
            "\t$0",
            "}",
        ],
        "description": "module test decl"
    },
    "test_fn": {
        "prefix": "fn_test",
        "body": [
            "#[test]",
            "fn ${1:name}($0) -> i32 {",
            "\t1",
            "}",
        ],
        "description": "test fn decl"
    },
}
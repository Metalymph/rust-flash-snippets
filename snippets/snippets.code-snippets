{
    "let": {
        "prefix": "let",
        "body": [
            "let ${2:varname} : ${3:type} = ${4:expr}$0"
        ],
        "description": "unmutable var declaration"
    },
    "let_mut": {
        "prefix": "let_mut",
        "body": [
            "let mut ${2:varname} : ${3:type} = ${4:expr}$0"
        ],
        "description": "mutable var declaration"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:expr} {",
            "\t${2:body}",
            "} else {",
            "\t${3:body}",
            "}",
            "$0"
        ],
        "description": "if-else"
    },
    "if-let": {
        "prefix": "if?",
        "body": [
            "if let ${1|Some(e),Err(e)|} = ${2:expr} {",
            "\t$0",
            "}",
        ],
        "description": "if-let"
    },
    "match": {
        "prefix": "match",
        "body": [
            "match ${1:expr} {",
            "\t${2:Case1} => ${3:expr1}",
            "\t${4:Case2} => ${5:expr2}",
            "}",
            "$0"
        ],
        "description": "match expr"
    },
    "loop": {
        "prefix": "loop",
        "body": [
            "loop {",
            "\t$0",
            "}",
        ],
        "description": "infinite loop"
    },
    "for": {
        "prefix": "loop",
        "body": [
            "for ${1:index}, ${2:value} in ${3:iterator} {",
            "\t$0",
            "}",
        ],
        "description": "for loop"
    },
    "struct": {
        "prefix": "stru",
        "body": [
            "${1|struct,pub struct|} ${2:name}${3:<T>} {",
            "\t${4:field}: ${5:type}$0",
            "}",
        ],
        "description": "struct decl"
    },
    "astruct": {
        "prefix": "stru_tup",
        "body": [
            "struct ${1:name}${2:<T>} (${3:type}, ${4:type})$0",
        ],
        "description": "tuple struct decl"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "${1|enum,pub enum|} ${2:name}${3:<T>} {",
            "\t${4:field}(${5:type}$0)",
            "}",
        ],
        "description": "enum decl"
    },
    "trait": {
        "prefix": "trait",
        "body": [
            "${1|trait,pub trait|} ${2:name}${3:<T>} {",
            "\t$0",
            "}",
        ],
        "description": "trait decl"
    },
    "impl_known_trait": {
        "prefix": "impl_known",
        "body": [
            "impl ${1|Clone,Copy,Debug,Deref,Display,Drop,Hashable,Send,Sync|} for ${2:type} {",
            "\t$0",
            "}",
        ],
        "description": "impl a known trait for type"
    },
    "impl_trait": {
        "prefix": "impl_t",
        "body": [
            "impl ${1:trait_name} for ${2:type} {",
            "\t$0",
            "}",
        ],
        "description": "impl a trait for type"
    },
    "const/method": {
        "prefix": "impl",
        "body": [
            "impl ${1:type} {",
            "\t ${2|fn,pub fn|} new(${3:param}: ${type}) -> ${1:type} {",
            "\t$0",
            "}",
        ],
        "description": "impl constructor/method"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "${1|fn,pub fn} ${2:name}(${3:param1}:${4:type}) -> ${5:return_type} {",
            "\t$0",
            "}",
        ],
        "description": "fn decl"
    },
    "method": {
        "prefix": "fn_met",
        "body": [
            "fn ${1:name}(${2|self,&self,&mut self|}, ${3:param1}:${4:type}) -> ${5:return_type} {",
            "\t$0",
            "}",
        ],
        "description": "method decl"
    },
    "async_fn": {
        "prefix": "async",
        "body": [
            "async fn ${1:name}(${2:param1}:${3:type}) -> ${4:std::io::Result<()>} {",
            "\t$0",
            "}",
        ],
        "description": "async fn decl"
    },
    "block": {
        "prefix": "{",
        "body": [
            "///${1:inner_scope_description}",
            "{",
            "\t$0",
        ],
        "description": "block"
    },
    "mod": {
        "prefix": "mod",
        "body": [
            "${1|mod,pub mod|} {",
            "\t$0",
            "}",
        ],
        "description": "module decl"
    },
    "use": {
        "prefix": "use",
        "body": [
            "use ${1:crate}::$0",
        ],
        "description": "use crate/type/fn"
    },
    "test_mod": {
        "prefix": "test_mod",
        "body": [
            "#[cfg(test)]",
            "mod {",
            "\t$0",
            "}",
        ],
        "description": "module test decl"
    },
    "test_fn": {
        "prefix": "fn_test",
        "body": [
            "#[test]",
            "fn ${1:name}(${2:param}: ${3:type}) -> ${4:return_type} {",
            "\t$0",
            "}",
        ],
        "description": "test fn decl"
    },
}